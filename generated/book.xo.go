// Package generated contains generated code for schema 'public'.
package generated

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)


// Book represents a row from 'public.books'.
type Book struct {
	ID        int64          `json:"id"`         // id
	CreatedAt sql.NullTime   `json:"created_at"` // created_at
	UpdatedAt sql.NullTime   `json:"updated_at"` // updated_at
	DeletedAt sql.NullTime   `json:"deleted_at"` // deleted_at
	Name      sql.NullString `json:"name"`       // name
	Price     sql.NullInt64  `json:"price"`      // price
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Book exists in the database.
func (b *Book) Exists() bool {
	return b._exists
}

// Deleted returns true when the Book has been marked for deletion from
// the database.
func (b *Book) Deleted() bool {
	return b._deleted
}

// Insert inserts the Book to the database.
func (b *Book) Insert(ctx context.Context, db DB) error {
	switch {
	case b._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case b._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.books (` +
		`created_at, updated_at, deleted_at, name, price` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, b.CreatedAt, b.UpdatedAt, b.DeletedAt, b.Name, b.Price)
	if err := db.QueryRowContext(ctx, sqlstr, b.CreatedAt, b.UpdatedAt, b.DeletedAt, b.Name, b.Price).Scan(&b.ID); err != nil {
		return logerror(err)
	}
	// set exists
	b._exists = true
	return nil
}

// Update updates a Book in the database.
func (b *Book) Update(ctx context.Context, db DB) error {
	switch {
	case !b._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case b._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.books SET ` +
		`created_at = $1, updated_at = $2, deleted_at = $3, name = $4, price = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, b.CreatedAt, b.UpdatedAt, b.DeletedAt, b.Name, b.Price, b.ID)
	if _, err := db.ExecContext(ctx, sqlstr, b.CreatedAt, b.UpdatedAt, b.DeletedAt, b.Name, b.Price, b.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Book to the database.
func (b *Book) Save(ctx context.Context, db DB) error {
	if b.Exists() {
		return b.Update(ctx, db)
	}
	return b.Insert(ctx, db)
}

// Upsert performs an upsert for Book.
func (b *Book) Upsert(ctx context.Context, db DB) error {
	switch {
	case b._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.books (` +
		`id, created_at, updated_at, deleted_at, name, price` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, deleted_at = EXCLUDED.deleted_at, name = EXCLUDED.name, price = EXCLUDED.price `
	// run
	logf(sqlstr, b.ID, b.CreatedAt, b.UpdatedAt, b.DeletedAt, b.Name, b.Price)
	if _, err := db.ExecContext(ctx, sqlstr, b.ID, b.CreatedAt, b.UpdatedAt, b.DeletedAt, b.Name, b.Price); err != nil {
		return logerror(err)
	}
	// set exists
	b._exists = true
	return nil
}

// Delete deletes the Book from the database.
func (b *Book) Delete(ctx context.Context, db DB) error {
	switch {
	case !b._exists: // doesn't exist
		return nil
	case b._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.books ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, b.ID)
	if _, err := db.ExecContext(ctx, sqlstr, b.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	b._deleted = true
	return nil
}

// BookByID retrieves a row from 'public.books' as a Book.
//
// Generated from index 'books_pkey'.
func BookByID(ctx context.Context, db DB, id int64) (*Book, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, created_at, updated_at, deleted_at, name, price ` +
		`FROM public.books ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	b := Book{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&b.ID, &b.CreatedAt, &b.UpdatedAt, &b.DeletedAt, &b.Name, &b.Price); err != nil {
		return nil, logerror(err)
	}
	return &b, nil
}

// BooksByDeletedAt retrieves a row from 'public.books' as a Book.
//
// Generated from index 'idx_books_deleted_at'.
func BooksByDeletedAt(ctx context.Context, db DB, deletedAt sql.NullTime) ([]*Book, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, created_at, updated_at, deleted_at, name, price ` +
		`FROM public.books ` +
		`WHERE deleted_at = $1`
	// run
	logf(sqlstr, deletedAt)
	rows, err := db.QueryContext(ctx, sqlstr, deletedAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Book
	for rows.Next() {
		b := Book{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&b.ID, &b.CreatedAt, &b.UpdatedAt, &b.DeletedAt, &b.Name, &b.Price); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &b)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
